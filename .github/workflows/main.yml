name: Deployment Workflow
on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST}} >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Build and Deploy
        run: |
          echo "Starting deployment..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          export GIT_SSH_COMMAND="ssh -i ${{ secrets.SSH_PATH }} -o IdentitiesOnly=yes"

          cd /root/farming
          if [ -d "farming_db" ]; then
            echo "Directory exists. Pulling latest changes..."
            cd farming_db
            git pull origin main

            echo "Starting Docker Setup..."
            cp /root/farming/.env /root/farming/farming_db/.env
            docker-compose down
            docker-compose up --build -d
            echo "Deployment completed."

            echo "Waiting for database to become ready..."
            timeout=180 # Set timeout in seconds (e.g., 180 seconds or 3 minutes)
            while [ $timeout -gt 0 ]; do
                if [ "$(docker-compose ps -q timescaledb | xargs docker inspect -f '{{.State.Health.Status}}')" == "healthy" ]; then
                    echo "Database is ready."
                    break
                fi
                sleep 10
                echo "Waiting for database..."
                timeout=$((timeout - 10))
            done

            if [ $timeout -le 0 ]; then
                echo "Timed out waiting for database to become ready."
                exit 1 # Exit with an error
            fi

            echo "Prepairing migrations..."
            docker-compose exec db-setup alembic upgrade head
            echo "Migrations completed."

          else
            echo "Directory does not exist. Cloning repository..."
            git clone git@github.com:mkt-market/farming_db.git
            
            cd farming_db
            git pull origin main

            echo "Starting Docker Setup..."
            cp /root/farming/.env /root/farming/farming_db/.env
            docker-compose down
            docker-compose up --build -d
            echo "Deployment completed."

            echo "Waiting for database to become ready..."
            timeout=180 # Set timeout in seconds (e.g., 180 seconds or 3 minutes)
            while [ $timeout -gt 0 ]; do
                if [ "$(docker-compose ps -q timescaledb | xargs docker inspect -f '{{.State.Health.Status}}')" == "healthy" ]; then
                    echo "Database is ready."
                    break
                fi
                sleep 10
                echo "Waiting for database..."
                timeout=$((timeout - 10))
            done

            if [ $timeout -le 0 ]; then
                echo "Timed out waiting for database to become ready."
                exit 1 # Exit with an error
            fi

            echo "Prepairing migrations..."
            docker-compose exec db-setup alembic upgrade head
            echo "Migrations completed."

          fi
          EOF
